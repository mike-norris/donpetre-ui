{"version":3,"file":"KnowledgeView-6wM5_FKI.js","sources":["../../node_modules/@mui/icons-material/esm/OpenInNew.js","../../src/pages/knowledge/KnowledgeView.tsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3z\"\n}), 'OpenInNew');","import { useEffect, useState } from 'react';\nimport { Box, Typography, Paper, Chip, Button, Divider, Link } from '@mui/material';\nimport {\n  Edit as EditIcon,\n  OpenInNew as OpenInNewIcon,\n  ArrowBack as ArrowBackIcon,\n} from '@mui/icons-material';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { knowledgeService } from 'services/knowledge';\nimport { KnowledgeItem } from '../../types';\nimport paths from 'routes/paths';\nimport { format } from 'date-fns';\n\nconst KnowledgeView = () => {\n  const { id } = useParams<{ id: string }>();\n  const navigate = useNavigate();\n  const [item, setItem] = useState<KnowledgeItem | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const fetchItem = async () => {\n      if (!id) return;\n\n      try {\n        const knowledgeItem = await knowledgeService.getKnowledgeItem(id);\n        setItem(knowledgeItem);\n      } catch (err: any) {\n        setError(err.response?.data?.message || 'Failed to load knowledge item');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchItem();\n  }, [id]);\n\n  const getSourceColor = (sourceType: string) => {\n    switch (sourceType) {\n      case 'GITHUB':\n        return 'primary';\n      case 'JIRA':\n        return 'secondary';\n      case 'GITLAB':\n        return 'info';\n      case 'MANUAL':\n        return 'success';\n      default:\n        return 'default';\n    }\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Typography>Loading...</Typography>\n      </Box>\n    );\n  }\n\n  if (error || !item) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Typography color=\"error\">{error || 'Knowledge item not found'}</Typography>\n        <Button\n          startIcon={<ArrowBackIcon />}\n          onClick={() => navigate(paths.knowledge)}\n          sx={{ mt: 2 }}\n        >\n          Back to Knowledge Base\n        </Button>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ maxWidth: 800, mx: 'auto' }}>\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>\n        <Button\n          startIcon={<ArrowBackIcon />}\n          onClick={() => navigate(paths.knowledge)}\n          sx={{ mr: 2 }}\n        >\n          Back\n        </Button>\n        <Box sx={{ flexGrow: 1 }} />\n        <Button\n          startIcon={<EditIcon />}\n          variant=\"outlined\"\n          onClick={() => navigate(paths.knowledgeEdit.replace(':id', item.id))}\n        >\n          Edit\n        </Button>\n      </Box>\n\n      <Paper sx={{ p: 3 }}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          {item.title}\n        </Typography>\n\n        <Box sx={{ display: 'flex', alignItems: 'center', mb: 3, flexWrap: 'wrap', gap: 1 }}>\n          <Chip\n            label={item.sourceType}\n            color={getSourceColor(item.sourceType) as any}\n            size=\"small\"\n          />\n\n          {item.tags.map((tag: string) => (\n            <Chip key={tag} label={tag} size=\"small\" variant=\"outlined\" />\n          ))}\n        </Box>\n\n        {item.summary && (\n          <>\n            <Typography variant=\"h6\" gutterBottom>\n              Summary\n            </Typography>\n            <Typography variant=\"body1\" sx={{ mb: 3 }} color=\"text.secondary\">\n              {item.summary}\n            </Typography>\n          </>\n        )}\n\n        <Divider sx={{ my: 3 }} />\n\n        <Typography variant=\"h6\" gutterBottom>\n          Content\n        </Typography>\n        <Typography\n          variant=\"body1\"\n          sx={{\n            mb: 3,\n            lineHeight: 1.7,\n            whiteSpace: 'pre-wrap',\n          }}\n        >\n          {item.content}\n        </Typography>\n\n        <Divider sx={{ my: 3 }} />\n\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Box>\n            <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\n              Created: {format(new Date(item.createdAt), 'PPP')}\n            </Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\n              Updated: {format(new Date(item.updatedAt), 'PPP')}\n            </Typography>\n            {item.author && (\n              <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\n                Author: {item.author.firstName} {item.author.lastName} ({item.author.username})\n              </Typography>\n            )}\n          </Box>\n\n          {item.sourceUrl && (\n            <Button\n              component={Link}\n              href={item.sourceUrl}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              startIcon={<OpenInNewIcon />}\n              variant=\"outlined\"\n              size=\"small\"\n            >\n              View Source\n            </Button>\n          )}\n        </Box>\n\n        {Object.keys(item.metadata || {}).length > 0 && (\n          <>\n            <Divider sx={{ my: 3 }} />\n            <Typography variant=\"h6\" gutterBottom>\n              Metadata\n            </Typography>\n            <Paper sx={{ p: 2, backgroundColor: 'grey.50' }}>\n              <pre style={{ margin: 0, fontSize: '0.875rem' }}>\n                {JSON.stringify(item.metadata, null, 2)}\n              </pre>\n            </Paper>\n          </>\n        )}\n      </Paper>\n    </Box>\n  );\n};\n\nexport default KnowledgeView;\n"],"names":["OpenInNewIcon","createSvgIcon","_jsx","KnowledgeView","id","useParams","navigate","useNavigate","item","setItem","useState","loading","setLoading","error","setError","useEffect","knowledgeItem","knowledgeService","err","_b","_a","getSourceColor","sourceType","jsx","Box","Typography","Button","ArrowBackIcon","paths","jsxs","EditIcon","Paper","Chip","tag","Fragment","Divider","format","Link"],"mappings":"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","x_google_ignoreList":[0]}